<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Digital Marketing Team Manager</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }

        .header h1 {
            color: #4a5568;
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
        }

        .tab-btn {
            padding: 12px 24px;
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .tab-btn.active {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .tab-content {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        label {
            font-weight: 600;
            margin-bottom: 8px;
            color: #4a5568;
        }

        input, select, textarea {
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-success {
            background: linear-gradient(45deg, #48bb78, #38a169);
            color: white;
        }

        .btn-danger {
            background: linear-gradient(45deg, #f56565, #e53e3e);
            color: white;
        }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(245, 101, 101, 0.4);
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 0.8em;
            margin-left: 8px;
        }

        .task-actions {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 15px;
        }

        .member-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 15px;
        }

        .delete-confirmation {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10001;
            backdrop-filter: blur(5px);
        }

        .confirmation-dialog {
            background: white;
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            max-width: 400px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            animation: dialogPop 0.3s ease-out;
        }

        @keyframes dialogPop {
            from { transform: scale(0.8); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }

        .confirmation-dialog h3 {
            color: #2d3748;
            margin-bottom: 15px;
        }

        .confirmation-dialog p {
            color: #718096;
            margin-bottom: 20px;
        }

        .confirmation-actions {
            display: flex;
            gap: 10px;
            justify-content: center;
        }

        .task-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border-left: 5px solid #667eea;
            transition: all 0.3s ease;
        }

        .task-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .task-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 10px;
        }

        .task-title {
            font-size: 1.2em;
            font-weight: 600;
            color: #2d3748;
        }

        .task-status {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-pending { background: #fed7d7; color: #c53030; }
        .status-in-progress { background: #feebc8; color: #dd6b20; }
        .status-completed { background: #c6f6d5; color: #38a169; }

        .team-member {
            background: linear-gradient(135deg, #f7fafc, #edf2f7);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            border: 2px solid #e2e8f0;
            transition: all 0.3s ease;
        }

        .team-member:hover {
            border-color: #667eea;
            transform: translateY(-2px);
        }

        .member-name {
            font-size: 1.3em;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 10px;
        }

        .member-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-top: 15px;
        }

        .stat-item {
            text-align: center;
            padding: 10px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .stat-number {
            font-size: 1.5em;
            font-weight: 700;
            color: #667eea;
        }

        .stat-label {
            font-size: 0.8em;
            color: #718096;
            margin-top: 5px;
        }

        .notification {
            background: linear-gradient(135deg, #4299e1, #3182ce);
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            animation: slideIn 0.5s ease;
        }

        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .notification.success {
            background: linear-gradient(135deg, #48bb78, #38a169);
        }

        .notification.warning {
            background: linear-gradient(135deg, #ed8936, #dd6b20);
        }

        .notification.urgent {
            background: linear-gradient(135deg, #f56565, #e53e3e);
            animation: urgentPulse 1s infinite;
        }

        @keyframes urgentPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.02); }
        }

        .close-notification {
            background: none;
            border: none;
            color: white;
            font-size: 1.2em;
            cursor: pointer;
            padding: 0;
            width: 20px;
            height: 20px;
        }

        /* Celebration Animation Styles */
        .celebration-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            pointer-events: none;
            z-index: 9999;
            overflow: hidden;
        }

        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            animation: confettiFall 3s linear forwards;
        }

        @keyframes confettiFall {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(360deg);
                opacity: 0;
            }
        }

        .celebration-message {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 30px 40px;
            border-radius: 20px;
            font-size: 1.5em;
            font-weight: bold;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            z-index: 10000;
            animation: celebrationPop 2s ease-out forwards;
        }

        @keyframes celebrationPop {
            0% {
                transform: translate(-50%, -50%) scale(0);
                opacity: 0;
            }
            20% {
                transform: translate(-50%, -50%) scale(1.2);
                opacity: 1;
            }
            100% {
                transform: translate(-50%, -50%) scale(0);
                opacity: 0;
            }
        }

        .task-dates {
            font-size: 0.9em;
            color: #718096;
            margin-top: 10px;
        }

        .task-dates span {
            margin-right: 15px;
        }

        .deadline-indicator {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 600;
            margin-left: 10px;
        }

        .deadline-ok { background: #c6f6d5; color: #38a169; }
        .deadline-warning { background: #feebc8; color: #dd6b20; }
        .deadline-urgent { background: #fed7d7; color: #c53030; animation: urgentBlink 1s infinite; }

        @keyframes urgentBlink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .member-stats {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 Digital Marketing Team Manager</h1>
            <p>Streamline your team's workflow and boost productivity</p>
        </div>

        <div class="tabs">
            <button class="tab-btn active" onclick="switchTab('tasks')">📋 Tasks</button>
            <button class="tab-btn" onclick="switchTab('team')">👥 Team</button>
            <button class="tab-btn" onclick="switchTab('reports')">📊 Reports</button>
            <button class="tab-btn" onclick="switchTab('notifications')">🔔 Notifications</button>
        </div>

        <!-- Tasks Tab -->
        <div id="tasks" class="tab-content active">
            <h2>Task Management</h2>
            
            <div class="form-grid">
                <div class="form-group">
                    <label>Task Title</label>
                    <input type="text" id="taskTitle" placeholder="e.g., Create Instagram campaign">
                </div>
                <div class="form-group">
                    <label>Assign To</label>
                    <select id="assignTo">
                        <option value="">Select team member</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Priority</label>
                    <select id="taskPriority">
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Due Date</label>
                    <input type="date" id="taskDueDate">
                </div>
                <div class="form-group full-width">
                    <label>Description</label>
                    <textarea id="taskDescription" rows="3" placeholder="Task details and requirements..."></textarea>
                </div>
            </div>

            <button class="btn btn-primary" onclick="addTask()">➕ Add Task</button>

            <div style="margin-top: 30px;">
                <h3>Active Tasks</h3>
                <div id="tasksList"></div>
            </div>
        </div>

        <!-- Team Tab -->
        <div id="team" class="tab-content">
            <h2>Team Management</h2>
            
            <div class="form-grid">
                <div class="form-group">
                    <label>Name</label>
                    <input type="text" id="memberName" placeholder="e.g., Sarah Johnson">
                </div>
                <div class="form-group">
                    <label>Role</label>
                    <select id="memberRole">
                        <option value="Content Creator">Content Creator</option>
                        <option value="Social Media Manager">Social Media Manager</option>
                        <option value="SEO Specialist">SEO Specialist</option>
                        <option value="PPC Specialist">PPC Specialist</option>
                        <option value="Graphic Designer">Graphic Designer</option>
                        <option value="Marketing Analyst">Marketing Analyst</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <input type="email" id="memberEmail" placeholder="sarah@company.com">
                </div>
                <div class="form-group">
                    <label>Experience Level</label>
                    <select id="memberLevel">
                        <option value="Junior">Junior</option>
                        <option value="Mid-level">Mid-level</option>
                        <option value="Senior">Senior</option>
                    </select>
                </div>
            </div>

            <button class="btn btn-primary" onclick="addTeamMember()">➕ Add Team Member</button>

            <div style="margin-top: 30px;">
                <h3>Team Members</h3>
                <div id="teamList"></div>
            </div>
        </div>

        <!-- Reports Tab -->
        <div id="reports" class="tab-content">
            <h2>Performance Reports</h2>
            
            <div style="margin-bottom: 30px;">
                <h3>Generate Report</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label>Report Period</label>
                        <select id="reportPeriod">
                            <option value="week">This Week</option>
                            <option value="month">This Month</option>
                            <option value="quarter">This Quarter</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Team Member</label>
                        <select id="reportMember">
                            <option value="all">All Team Members</option>
                        </select>
                    </div>
                </div>
                <button class="btn btn-primary" onclick="generateReport()">📄 Generate PDF Report</button>
            </div>

            <div id="reportPreview"></div>
        </div>

        <!-- Notifications Tab -->
        <div id="notifications" class="tab-content">
            <h2>Notifications</h2>
            <div id="notificationsList">
                <p style="color: #718096; text-align: center; padding: 40px;">No notifications yet. Task completions and updates will appear here.</p>
            </div>
        </div>
    </div>

    <script>
        // Data storage
        let teamMembers = [];
        let tasks = [];
        let notifications = [];
        let deleteConfirmation = null;

        // Initialize with sample data
        function initializeData() {
            // Sample team members
            teamMembers = [
                { id: 1, name: 'Sarah Johnson', role: 'Social Media Manager', email: 'sarah@company.com', level: 'Senior' },
                { id: 2, name: 'Mike Chen', role: 'Content Creator', email: 'mike@company.com', level: 'Mid-level' },
                { id: 3, name: 'Emily Rodriguez', role: 'SEO Specialist', email: 'emily@company.com', level: 'Senior' }
            ];

            // Sample tasks
            tasks = [
                { id: 1, title: 'Instagram Campaign Launch', assignedTo: 1, priority: 'high', dueDate: '2025-06-10', description: 'Create and launch summer campaign', status: 'in-progress', createdAt: new Date('2025-05-28'), assignedDate: new Date('2025-05-28') },
                { id: 2, title: 'Blog Content Strategy', assignedTo: 2, priority: 'medium', dueDate: '2025-06-15', description: 'Develop Q3 content calendar', status: 'pending', createdAt: new Date('2025-05-30'), assignedDate: new Date('2025-05-30') }
            ];

            updateUI();
        }

        // Tab switching
        function switchTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }

        // Remove team member
        function removeTeamMember(memberId) {
            showDeleteConfirmation(
                'Remove Team Member',
                'Are you sure you want to remove this team member? All their assigned tasks will become unassigned.',
                () => {
                    const member = teamMembers.find(m => m.id === memberId);
                    teamMembers = teamMembers.filter(m => m.id !== memberId);
                    
                    // Unassign tasks from removed member
                    tasks.forEach(task => {
                        if (task.assignedTo === memberId) {
                            task.assignedTo = null;
                        }
                    });
                    
                    updateUI();
                    showNotification(`${member.name} has been removed from the team`, 'warning');
                }
            );
        }

        // Remove task
        function removeTask(taskId) {
            showDeleteConfirmation(
                'Delete Task',
                'Are you sure you want to delete this task? This action cannot be undone.',
                () => {
                    const task = tasks.find(t => t.id === taskId);
                    tasks = tasks.filter(t => t.id !== taskId);
                    updateUI();
                    showNotification(`Task "${task.title}" has been deleted`, 'warning');
                }
            );
        }

        // Show delete confirmation dialog
        function showDeleteConfirmation(title, message, onConfirm) {
            const overlay = document.createElement('div');
            overlay.className = 'delete-confirmation';
            overlay.innerHTML = `
                <div class="confirmation-dialog">
                    <h3>${title}</h3>
                    <p>${message}</p>
                    <div class="confirmation-actions">
                        <button class="btn btn-danger" onclick="confirmDelete()">Yes, Delete</button>
                        <button class="btn" onclick="cancelDelete()" style="background: #e2e8f0; color: #4a5568;">Cancel</button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(overlay);
            deleteConfirmation = { overlay, onConfirm };
        }

        // Confirm delete action
        function confirmDelete() {
            if (deleteConfirmation) {
                deleteConfirmation.onConfirm();
                document.body.removeChild(deleteConfirmation.overlay);
                deleteConfirmation = null;
            }
        }

        // Cancel delete action
        function cancelDelete() {
            if (deleteConfirmation) {
                document.body.removeChild(deleteConfirmation.overlay);
                deleteConfirmation = null;
            }
        }
        function addTeamMember() {
            const name = document.getElementById('memberName').value;
            const role = document.getElementById('memberRole').value;
            const email = document.getElementById('memberEmail').value;
            const level = document.getElementById('memberLevel').value;

            if (!name || !email) {
                showNotification('Please fill in all required fields', 'error');
                return;
            }

            const newMember = {
                id: Date.now(),
                name,
                role,
                email,
                level
            };

            teamMembers.push(newMember);
            
            // Clear form
            document.getElementById('memberName').value = '';
            document.getElementById('memberEmail').value = '';
            
            updateUI();
            showNotification(`${name} has been added to the team!`, 'success');
        }

        // Add task
        function addTask() {
            const title = document.getElementById('taskTitle').value;
            const assignedTo = parseInt(document.getElementById('assignTo').value);
            const priority = document.getElementById('taskPriority').value;
            const dueDate = document.getElementById('taskDueDate').value;
            const description = document.getElementById('taskDescription').value;

            if (!title || !assignedTo || !dueDate) {
                showNotification('Please fill in all required fields', 'error');
                return;
            }

            const newTask = {
                id: Date.now(),
                title,
                assignedTo,
                priority,
                dueDate,
                description,
                status: 'pending',
                createdAt: new Date(),
                assignedDate: new Date()
            };

            tasks.push(newTask);
            
            // Clear form
            document.getElementById('taskTitle').value = '';
            document.getElementById('taskDescription').value = '';
            
            updateUI();
            
            const memberName = teamMembers.find(m => m.id === assignedTo)?.name;
            showNotification(`Task "${title}" assigned to ${memberName}`, 'success');
        }

        // Update task status
        function updateTaskStatus(taskId, newStatus) {
            const task = tasks.find(t => t.id === taskId);
            const oldStatus = task.status;
            task.status = newStatus;
            
            updateUI();
            
            if (newStatus === 'completed' && oldStatus !== 'completed') {
                const memberName = teamMembers.find(m => m.id === task.assignedTo)?.name;
                showNotification(`🎉 Task "${task.title}" completed by ${memberName}!`, 'success');
                triggerCelebration(memberName, task.title);
            }
        }

        // Trigger celebration animation
        function triggerCelebration(memberName, taskTitle) {
            // Create celebration overlay
            const overlay = document.createElement('div');
            overlay.className = 'celebration-overlay';
            document.body.appendChild(overlay);

            // Create celebration message
            const message = document.createElement('div');
            message.className = 'celebration-message';
            message.innerHTML = `
                🎉 Awesome Work! 🎉<br>
                <div style="font-size: 0.8em; margin-top: 10px;">
                    ${memberName} completed:<br>
                    "${taskTitle}"
                </div>
            `;
            document.body.appendChild(message);

            // Create confetti
            const colors = ['#667eea', '#764ba2', '#48bb78', '#f56565', '#ed8936', '#4299e1'];
            for (let i = 0; i < 50; i++) {
                setTimeout(() => {
                    const confetti = document.createElement('div');
                    confetti.className = 'confetti';
                    confetti.style.left = Math.random() * 100 + 'vw';
                    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                    confetti.style.animationDelay = Math.random() * 2 + 's';
                    confetti.style.animationDuration = (Math.random() * 2 + 2) + 's';
                    overlay.appendChild(confetti);
                }, i * 100);
            }

            // Clean up after animation
            setTimeout(() => {
                document.body.removeChild(overlay);
                document.body.removeChild(message);
            }, 3000);
        }

        // Calculate deadline urgency
        function getDeadlineUrgency(dueDate) {
            const now = new Date();
            const due = new Date(dueDate);
            const daysLeft = Math.ceil((due - now) / (1000 * 60 * 60 * 24));

            if (daysLeft < 0) return { level: 'overdue', text: 'OVERDUE', class: 'deadline-urgent' };
            if (daysLeft <= 1) return { level: 'urgent', text: `${daysLeft} day left`, class: 'deadline-urgent' };
            if (daysLeft <= 3) return { level: 'warning', text: `${daysLeft} days left`, class: 'deadline-warning' };
            return { level: 'ok', text: `${daysLeft} days left`, class: 'deadline-ok' };
        }

        // Check deadlines and send reminders
        function checkDeadlines() {
            const now = new Date();
            
            tasks.forEach(task => {
                if (task.status === 'completed') return;
                
                const urgency = getDeadlineUrgency(task.dueDate);
                const memberName = teamMembers.find(m => m.id === task.assignedTo)?.name || 'Unassigned';
                
                // Send progressive reminders
                if (urgency.level === 'urgent') {
                    showNotification(`🚨 URGENT: "${task.title}" is due soon for ${memberName}!`, 'urgent');
                } else if (urgency.level === 'warning') {
                    showNotification(`⚠️ Reminder: "${task.title}" is due in ${urgency.text} for ${memberName}`, 'warning');
                } else if (urgency.level === 'overdue') {
                    showNotification(`🔥 OVERDUE: "${task.title}" was due and needs immediate attention from ${memberName}!`, 'urgent');
                }
            });
        }

        // Show notification
        function showNotification(message, type = 'info') {
            const notification = {
                id: Date.now(),
                message,
                type,
                timestamp: new Date()
            };
            
            notifications.unshift(notification);
            updateNotifications();
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                removeNotification(notification.id);
            }, 5000);
        }

        // Remove notification
        function removeNotification(notificationId) {
            notifications = notifications.filter(n => n.id !== notificationId);
            updateNotifications();
        }

        // Update UI
        function updateUI() {
            updateTeamSelects();
            updateTasksList();
            updateTeamList();
            updateReportSelects();
        }

        // Update team select dropdowns
        function updateTeamSelects() {
            const assignSelect = document.getElementById('assignTo');
            const reportSelect = document.getElementById('reportMember');
            
            // Clear existing options (except first)
            assignSelect.innerHTML = '<option value="">Select team member</option>';
            reportSelect.innerHTML = '<option value="all">All Team Members</option>';
            
            teamMembers.forEach(member => {
                assignSelect.innerHTML += `<option value="${member.id}">${member.name}</option>`;
                reportSelect.innerHTML += `<option value="${member.id}">${member.name}</option>`;
            });
        }

        // Update tasks list
        function updateTasksList() {
            const tasksList = document.getElementById('tasksList');
            
            if (tasks.length === 0) {
                tasksList.innerHTML = '<p style="color: #718096; text-align: center; padding: 40px;">No tasks yet. Add your first task above!</p>';
                return;
            }

            tasksList.innerHTML = tasks.map(task => {
                const member = teamMembers.find(m => m.id === task.assignedTo);
                const memberName = member ? member.name : 'Unassigned';
                const urgency = getDeadlineUrgency(task.dueDate);
                
                return `
                    <div class="task-card">
                        <div class="task-header">
                            <div class="task-title">${task.title}</div>
                            <div class="task-status status-${task.status.replace(' ', '-')}">${task.status}</div>
                        </div>
                        <p><strong>Assigned to:</strong> ${memberName}</p>
                        <p><strong>Priority:</strong> ${task.priority.toUpperCase()}</p>
                        <p><strong>Due:</strong> ${new Date(task.dueDate).toLocaleDateString()} 
                           <span class="deadline-indicator ${urgency.class}">${urgency.text}</span>
                        </p>
                        <p><strong>Description:</strong> ${task.description}</p>
                        <div class="task-dates">
                            <span><strong>Assigned:</strong> ${task.assignedDate.toLocaleDateString()}</span>
                            <span><strong>Created:</strong> ${task.createdAt.toLocaleDateString()}</span>
                        </div>
                        <div class="task-actions">
                            <select onchange="updateTaskStatus(${task.id}, this.value)">
                                <option value="pending" ${task.status === 'pending' ? 'selected' : ''}>Pending</option>
                                <option value="in-progress" ${task.status === 'in-progress' ? 'selected' : ''}>In Progress</option>
                                <option value="completed" ${task.status === 'completed' ? 'selected' : ''}>Completed</option>
                            </select>
                            <button class="btn btn-danger btn-small" onclick="removeTask(${task.id})">🗑️ Delete</button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Update team list
        function updateTeamList() {
            const teamList = document.getElementById('teamList');
            
            if (teamMembers.length === 0) {
                teamList.innerHTML = '<p style="color: #718096; text-align: center; padding: 40px;">No team members yet. Add your first team member above!</p>';
                return;
            }

            teamList.innerHTML = teamMembers.map(member => {
                const memberTasks = tasks.filter(t => t.assignedTo === member.id);
                const completedTasks = memberTasks.filter(t => t.status === 'completed').length;
                const pendingTasks = memberTasks.filter(t => t.status === 'pending').length;
                const inProgressTasks = memberTasks.filter(t => t.status === 'in-progress').length;
                
                return `
                    <div class="team-member">
                        <div class="member-name">${member.name}</div>
                        <p><strong>Role:</strong> ${member.role}</p>
                        <p><strong>Email:</strong> ${member.email}</p>
                        <p><strong>Level:</strong> ${member.level}</p>
                        
                        <div class="member-stats">
                            <div class="stat-item">
                                <div class="stat-number">${completedTasks}</div>
                                <div class="stat-label">Completed</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">${inProgressTasks}</div>
                                <div class="stat-label">In Progress</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number">${pendingTasks}</div>
                                <div class="stat-label">Pending</div>
                            </div>
                        </div>
                        
                        <div class="member-actions">
                            <div style="color: #718096; font-size: 0.9em;">
                                ${memberTasks.length} total tasks assigned
                            </div>
                            <button class="btn btn-danger btn-small" onclick="removeTeamMember(${member.id})">🗑️ Remove</button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Update report selects
        function updateReportSelects() {
            // Already handled in updateTeamSelects
        }

        // Update notifications
        function updateNotifications() {
            const notificationsList = document.getElementById('notificationsList');
            
            if (notifications.length === 0) {
                notificationsList.innerHTML = '<p style="color: #718096; text-align: center; padding: 40px;">No notifications yet. Task completions and updates will appear here.</p>';
                return;
            }

            notificationsList.innerHTML = notifications.map(notification => `
                <div class="notification ${notification.type}">
                    <div>
                        <strong>${notification.message}</strong>
                        <div style="font-size: 0.8em; opacity: 0.8; margin-top: 5px;">
                            ${notification.timestamp.toLocaleString()}
                        </div>
                    </div>
                    <button class="close-notification" onclick="removeNotification(${notification.id})">×</button>
                </div>
            `).join('');
        }

        // Generate PDF report
        function generateReport() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            const period = document.getElementById('reportPeriod').value;
            const memberId = document.getElementById('reportMember').value;
            
            // Title
            doc.setFontSize(20);
            doc.text('Digital Marketing Team Performance Report', 20, 30);
            
            doc.setFontSize(12);
            doc.text(`Report Period: ${period.charAt(0).toUpperCase() + period.slice(1)}`, 20, 50);
            doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 60);
            
            let yPos = 80;
            
            // Filter data based on selection
            const reportMembers = memberId === 'all' ? teamMembers : teamMembers.filter(m => m.id == memberId);
            
            reportMembers.forEach(member => {
                const memberTasks = tasks.filter(t => t.assignedTo === member.id);
                const completedTasks = memberTasks.filter(t => t.status === 'completed').length;
                const totalTasks = memberTasks.length;
                const completionRate = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;
                
                doc.setFontSize(16);
                doc.text(`${member.name} - ${member.role}`, 20, yPos);
                yPos += 15;
                
                doc.setFontSize(12);
                doc.text(`Total Tasks: ${totalTasks}`, 30, yPos);
                yPos += 10;
                doc.text(`Completed: ${completedTasks}`, 30, yPos);
                yPos += 10;
                doc.text(`Completion Rate: ${completionRate}%`, 30, yPos);
                yPos += 20;
                
                if (yPos > 250) {
                    doc.addPage();
                    yPos = 30;
                }
            });
            
            // Overall summary
            const totalTasks = tasks.length;
            const totalCompleted = tasks.filter(t => t.status === 'completed').length;
            const overallRate = totalTasks > 0 ? Math.round((totalCompleted / totalTasks) * 100) : 0;
            
            doc.setFontSize(16);
            doc.text('Overall Summary', 20, yPos);
            yPos += 15;
            
            doc.setFontSize(12);
            doc.text(`Total Team Tasks: ${totalTasks}`, 30, yPos);
            yPos += 10;
            doc.text(`Total Completed: ${totalCompleted}`, 30, yPos);
            yPos += 10;
            doc.text(`Team Completion Rate: ${overallRate}%`, 30, yPos);
            
            // Save the PDF
            doc.save(`marketing-team-report-${new Date().toISOString().split('T')[0]}.pdf`);
            
            showNotification('Performance report generated and downloaded!', 'success');
        }

        // Initialize the app
        initializeData();
        
        // Check deadlines every 30 seconds (in real app, you'd do this less frequently)
        setInterval(checkDeadlines, 30000);
        
        // Initial deadline check
        setTimeout(checkDeadlines, 2000);
    </script>
</body>
</html>